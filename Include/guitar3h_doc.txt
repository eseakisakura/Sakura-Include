/*  　概要 


// title:        "guitar2.h"
// description:  diagramMML変換付きguitar支援スクリプト
// keywords:     SAKURA Function     Powered by 04coreworks


	ギターのMML書き込みをサポートするヘッダです。
	コード名を記入することによって演奏します。

	ギター特有のカッティングやアルペジオを、
	簡単な指定により再現できるようにしました。


	guitar2.hは、構造化エディタに対応しています。
	※ guitar.hとは一部互換性があります。


	Includeフォルダに入れて使います。
	guitar2.hを、サクラ、TW-music2の、Includeフォルダに入れて下さい。


	※ リネームが必要な場合

	拡張子"h"が、何らかのソフトにより登録されているケースにおいて、
	"guitar2.h.mml"のようにリネームされることがあります。

 	この場合、フォルダオプションの、
	"登録されている拡張子は表示しない"のチェックを一時的に外し、
	拡張子を表示するようにした後、リネームしてみて下さい。
	
　□注意点 


//　# はs に、置換えて記述して下さい。
//　サクラでは、#はマクロを意味するためです。

//　　F#m7b5  -> Fsm7b5
//　　Bm7#5   -> Bm7s5
//　　Abb9#11 -> Abb9s11


//　※6弦開放Eをo3eとしているため、
//　トラック始めに、o3記述を入れる必要があります。

//　※弦特性を付加するため、q__9,v__9,t__9は使用済みとなります。



//　TimeBase=192 のような細かいチック設定において、
//　ゲート指定でq101 以上の指定があると、

//　ノートオン、ノートオフのタイミングの関係上、
//　音が途切れる問題があります。

//　できるだけ、q100 以下で運用して下さい。

 
　□免責事項 /使用条件 /著作権など 


　・Apacheライセンス2.0を適用して下さい

　・当スクリプト群を使用して何らかの問題が起こっても、
　　責任を要求しないこと

　・再配布する際は、当ファイルを維持して下さい


　= 黄白紅藍玄 =
　https://twitter.com/huangbaihonglan

　Copyright(C) 04coreworks
　https://github.com/eseakisakura
 
　□謝辞 


　コードポジションは、以下のページ様を参照しています。

　http://www9.ocn.ne.jp/~knatsu/chords/chords.html
　http://www.ishibashi.co.jp/academic/Chord_Guitar/C.htm
　ドミナント9th - 8monji-guitar.com

　http://www.naru-gakki.com/guitar-opentuning/
　http://guitar-hakase.com/tuning/
　http://www.aki-f.com/kouza/b_kouza/kouza5/kouza5_2.htm
 
　□履歴 

　15 10 28	メジャーアップデート終了 -- ver.4
　   11	4	#Mode_def -> #Mode_setのようにマクロ名を変更

　16 1	9	BARATUKIのup_strokeを早めた t__8=-2
　   5	13	Forループ、SizeOf部の最適化
		取説書き直し
	20	Cut_prn,Arp_prnを追加、及び最適化
		MML文字のInt g errの解決 TT;と叩けなかった
		#Oct_setを追加 ->8.27廃止
     6	4	result出力を追加
		prnは再生なし返値付きとした
		Chord Functionをマクロ化
		Cutting弦調整高音弱から強へ
		Chdprintのresult抜け修正
	11	Cuttingで付点可にした
     7	14	Arpeggioのパラメータ調整
	28	Cuttingのパラメータ増加 ->9.13廃止
     8	1	Arpeggioのパラメータ増加
	27	Fretnoteの廃止に伴う修正
     9	13	Cuttingのtqv__8廃止
	24	Arpeggioのサム指定自動チェンジ追加
	25	sus2記述でもadd9可とした、sus4の間違い修正

  20 6 19	ver5.0cを廃止、ver4.5系からの派生をver6.0とした
	29	テンションコードの追加
	30	#はpでなくsとした、見間違い防止のため
     7	1	5.0c系から必要な機能のみ移植した
		(〜)によるコマンド記述はセキュリティ的に不利なため廃止
		引数マクロの""抜けエラー修正
	2	ドキュメント直した
	4	処理の最適化
	14	mM7b5を追加した

  21 12 8	自動差換えを増やした
		(A911)->A9sus4、(A1113)->A13sus4、(Am913)->Am69
		Arpeggioのパラメータ調整、Cuttingでr-への対応をした
	18	選択コードのLyric出力を追加した
	20	外部コマンドは、(小括弧の中)に記述するように、変更した
	27	XGモードのarpタイミング等の修正をした

  22 1 5	Arpeggioの出力部を刷新した
		mをmuteとして追加
		cuttingのduに続く数字をLength,バラつきとした
		strokeの仕様をLength,バラつきと順番を逆にした
		Fret_Mmlでマイナス値に対応した
		dropのopen_tuningを追加した
		Speed_Setterを修正した

	8 26	tab,CR,LFをトリムするようにした
 
*/ 
  
/*　　クイックリファレンス 
	
　□指定できるコードリスト 

  [# は、sへ置き換える]
　[pwはギターリフで、omit3コード]

 　A     |AM7  |AM79   |(AM9)   |AM7s11 |AM713  |AM913
   Am    |Am7  |Am79   |(Am9)   |Am711  |Am911 |(Am913)
 　A7    |A7b9 |A79    |(A9)    |A7s9   |(A711) |A7s11 |A7b13 |A713
   Ab9s11 |(A911) |(A1113) |(As9b13) |(A913)

   AM7b5 |Am7b5  |Am7b511 |A7b5
   AM7s5 |Am7s5  |(A7s5)
   AmM7  |AmM7b5 |AmM7s5 |AmM79
   A6    |A69    |Am6     |Am69

   Aadd9 |Aadd911 |Amadd9 |Amadd911
   Asus2 |A6sus2  |Asus4  |A7sus4   |A9sus4 |A13sus4
 　Adim  |Adim7   |Aaug   |Aaug7
 　Apw2  |Apw3

  [同じため、自動差換え](テンションコード参照)
	(AM9)	->AM79
	(Am9)	->Am79
	(A9)		->A79
	(A711)	->A7sus4
	(A911)	->A9sus4
	(A1113)	->A13sus4
	(A913)	->A69
	(Am913)	->Am69
	(As9b13)->Am7s5
	(A7s5)	->Aaug7
 
　□各機能の記述例 




	
　■ストローク / guitar.h互換 

　Include(guitar2.h);

　Time=(!4) @27 q93 o3 l2

　Em7b5 A7  Dm7(4) G7(4,-5,6)  C(1,12,5)
 
　■カッティング Cutting 

　Include(guitar2.h);

　Time=(!4) @26 o3 q96 v99 l8
　#Mode_set="cut"
　E7sus4

　Am("(l8) d^du ^udu (v88 q18) d3u2^^^")
 
　■アルペジオ Arpeggio 

　Include(guitar2.h);

　Time=(!4) @25 o3 q108 l8
　#Mode_set="arp"

　E7sus4
  Am("(t+1) r232 (t-1) 1232 u^^^")
 
　■ダイアグラム呼出し Chdprint 

　Include(guitar2.h);

　Time=(!4) @27 o3 v99 l8

　Chdprint(" x02 55x  N") // ナットモード
　Chdprint("r2-1 102  C") // キー指定モード

　q100 Chdprint(" [r323 123:2]2^^^ ",arp,"x02 55x  N")
　q96  Chdprint(" [d^d:u^udu]u^^^^ ",cut,"r21 1xx  B")
  
　□基本雛型 

　Include(gs.h) ResetGS()r4
　Include(guitar2.h)
　Time=(!2)

　//カッティング//

　#Mode_set="cut"
　#Cut_set={ d^du ^udu }

　@26 o3 q93 v86 l8
  Dm7b5 E7 Am7 D7

　//アルペジオ//

　#Mode_set="arp"
　#Arp_set={ r131 2131 }

　@25 o3 q115 v106 l8
  Dm7b5 E7 Am7 D7

　//Chdprintのバッキング//

　Chdprint(" d^du ",cut,)
　Chdprint(" r321 ",arp,"r22 100 A")
 
*/ 
  
/*　　ベーシックリファレンス 


　　各機能の簡易マニュアルです。

　　詳細説明書につきましては、
　　スクリプト下部参照のこと。
	
　□使用上の制限 


	
　■カッコ内での記述について 


//　"" ないし、{}で挟んで対処します。

//　記号、アルファベットが混在するため、
//　string扱いでなければ、エラーとなるためです。

//　-> Am7("du^u") or Am7({du^u})
//　-> Am7("r1^3") or Am7({r1^3})
 
　■print機能について 


//　"Print"コマンドとの衝突を避けるため、
//　使用する際は、小文字で"print"と記載のこと。

//　-> Am(3,print)
 
　■アルペジオの仕様 


//　アルペジオは、弦が2本以下となる場合、
//　出力しない仕様です。

//　->Fpw2("r1^1",arp,6) // 2弦のみだと、エラー出力


//　アルペジオでは、4弦コードであれば、
//　細い弦から、1,2,3,rと自動でアサインします。このため、

//　4弦コードで、5弦や6弦がない場合、

//　自動的に[r]が、[h],[u]の代りに差換えられる仕様となっています。
//　(デフォルトモードを#Sum_chg= "off"とすれば、手動指定も可)

//　Am7("rhu 321",arp, 4) | x, x, `a, ``e, ``g, ```c

//　-> rrr321　
//　-> `a`a`a ``e``g```c
 
　■アルペジオとループカウンタ 


//　アルペジオでは、数字で指定するため、
//　記述によっては、ループカウンタの数字と見分けがつきません。

//　これを避けるため、spaceで明示的に分離する必要があります。


//　-> [ 123r]  // [ space 123]
//　-> [4 123r] // [4 space 123r]
 
　■Chdprintの左寄せ記述について 


//　Chdprintでは、左側ふたつに記述がない場合、
//　左寄せ記述ができます。

//　Chdprint(,,"x02 55x  N") -> Chdprint("x02 55x  N")


//　これは#Mode_set="prn"などを併用した際、
//　","の、記述を減らすための仕様となってます。

//　-> #Mode_set="prn" Chdprint("x02 55x  N")
  
　□各機能の説明 


	
　- Stroke ストローク  - 


//　ストロークプレイを演奏します
//　コードを一つ指定すると、一回 "ジャン"と鳴ります。

//　guitar.hと互換をとるための機能です。

　-- Strokeの入力例 --

　　A7(4)

　　E7(1,2)
　　Dm7(2,3,6)


　■音符長の指定 / l2


　　G7(2)と指定すると、
　　G7のコードを2分音符分、維持します


　■バラつきを指定 / 3,-2


　　F7(2,3)のように、
　　3とダウンストロークを指定します。
　　これにより、ニュアンスを付けることができます。

　　F7(2,-3)であれば、
　　アップストローク速度が 3となります


　■ルート弦の指定 / 6,5,4


　　ギターでは、ポジションによって、
　　響きが違うコードを演奏できます。

　　このポジションを選択するために、
　　三本あるルート弦から、ひとつを指定します。

　　E7(2,3,6)であれば、
　　6弦ルートの響きを持つコードが選択されます



 
　- Cutting カッティング - 


//　カッティングを演奏します
//　ダウンアップ記述のみで、ストロークするものです。

　-- Cuttingの入力例 --

　　A7("d^^u d^d^^ ")

　　E7("du^m du^^",cut)
　　Dm7("d^^^ ^mdu",cut,5)


　■カッティングの指定 / dumr

　　FM7("d^^u  ^ud^",cut)

　　コードをジャカジャンと、鳴らすためには、
　　 d(own)、u(p)ストロークを繰り返します。

　　このため、奇数番はd、偶数番はu、と打つことで、
　　空ストロークのある自然な演奏となります。


　　l2 FM7("d8u8^4^  d4d4^ ",cut)

　　数字を後に付けると、音符長になります。


　　l2 FM7("d8u8,7^4^  d4d4,11^ ",cut)

　　ジャラランとバラつきを付けたいのであれば、
　　音符長の後に数字を加えます。


　　"m","r"は、ミュートとなります。


　■カッティングモードの指定 / cut

　　G7("du^u",cut)と指定します。
　　これにより、カッティングモードとして動きます。



　■ルート弦の指定 / 6,5,4

　　E7("du^u",cut,6)であれば、
　　6弦ルートの響きを持つコードが選択されます。


 
　- Arpeggio アルペジオ - 


//　弦指定をすることで、
//　アルペジオを打ち込みで演奏します。

　-- Arpeggioの入力例 --

　　A7("r321 u321")

　　E7("r231 u231",arp)
　　Dm7("r131 3131",arp,5)


　■アルペジオの指定 / rhu321m

　　E7("r13m u131",arp)

　　アルペジオをポロポロ鳴らすには、
　　"r"(oot)を指定し、次に"123"弦のどれかを弾きます。

　　例えば、裏を 1弦で弾くのであれば、基本4つ"r131"をつくり、
　　これを倍にして、"r131 2131"のように指定します。

　　コードの弦数によりますが、5弦相当の "h"(armony)、4弦相当の "u"(nison)も、
　　使用できる場合もあります。

　　"m"は、全弦ミュートとなります。


　■アルペジオモードの指定 / arp

　　G7("r232",arp)と指定します。
　　これで、アルペジオモードとして動きます。



　■ルート弦の指定 / 6,5,4

　　ストロークと同じで、響きの選択です。

　　FM7("r321",arp,6)であれば、
　　6弦ルートの響きを持つコードが選択されます。



 
　- Chdprint ダイアグラム呼出し - 


//　ギターポジションによる、
//　直接指定をするときに使用します。

　-- Chdprintの入力例 --

　　Chdprint(,prn,"x02 55x  N") // 開放弦のポジション

　　Chdprint({d^du},cut,"rx0 0-1x  F#") // "r"と指定後、キー"F#"
　　Chdprint({r321},arp,"sx0 0-1x  F#") // "s"サイレントルート


　■ナット固定 / N(ut)

　　常にヘッドのナット"N"を起点とします。

	Chdprint("x02 55x  N") // A

	1E x||   |   |   |   |   |
	2B  ||   |   |   |   |  e|
	3G  ||   |   |   |   |  c|
	4D  ||   |  e|   |   |   |
	5A a||   |   |   |   |   |
	6E x||   |   |   |   |   |
	   N    1   2   3F  4   5F


	10F以降の指定は、順に 9,a,b,c と増えます。(12Fのcまで)



　■キー指定 / A-G# [root,silent]

　　バレーするキー[A-G#]を起点とします。

	Chdprint("rx0 0-1x  F#") // F#m7b5

	1	x|   |   |   |
	2	 | b5|   |   |
	3	 |   | b3|   |
	4	 |   | b7|   |
	5	x|   |   |   |
	6	 |   |r,s|   |
		   -1   0   1

	ルート指定 r,s が必要となります。(s: ルートを弾かない)



  
　□各モード共通のコマンド文字について 


	r	| 休符ですが、アルペシオではルートを意味します
	^	| タイ
	m	| ミュート

	[:]	| ネストのあるループが使用できます


	d^du v90 d^^^ のように、外部コマンドv90を挿入する場合、
	d^du (v90) d^^^ のように小括弧の中へ記述して下さい。

	凡例
	A7("d^du (v90) d^^^",cut)


　■カッティング Cutting

　"r" 休符、"." 付点が使用できます。

　l8 A7(" du^u (l12) [du^ u^u] ",cut) // 以後"l12"となる。

// "'"[和音]は不可です。


　■アルペジオ Arpeggio

　"r"は、休符ではなくルート指定となります。

　'21'などの和音指定により、ダブルストップもできます。

　l8 A7({ r 3'21'3 u 3'21'3 },arp)

// "l"[音長]は不可です。


　外部コマンドは、mml展開の問題で好ましくありません。
　使う場合は、変更値が内部で完結するように記述する必要があります。

　A7("r321 (v_+11) r321") だと問題があるため、
　A7("r321 (v_+11) r321(v_-11)") のように記述する。

　(参照 : 詳細説明書 / アルペジオにおけるmml展開、外部コマンドの仕様)


　■ダイアグラム呼出し Chdprint

　ダイアグラムのポジションには、
　以下の文字により指定してください。

　rsx +-0123456789abc NABCDEFGbp#


　-- 各種凡例 --

 Include(guitar2.h)

　//Cut
　l8 v77 Fadd9(" [4 d4u3[d3u2]:d6u5] ",cut)
　l8 v77 Fadd9(" [ (@28,0 q66) du2 (Key(-5)@29 v-11 <) d (> Key=0) ] ",cut)
　l8 v77 Fadd9("(Key(-5)@29 v-11 <) d",cut)

　//Arp
　l8 Em7b5(" [r321 ^: 232] 321 ",arp)
　l8 Em7b5(" (q_=0)r 323 (q_+11) 'u (q_-11) 1'",arp)

　//Chdprint
　Chdprint("x02 55x  N")
　Chdprint(,prn,"x02 55x  N")

　Chdprint("d^du",cut,"r2-1 102  C")
　Chdprint("r321",arp,"s2-1 102  C")

 
　□各機能のモード選択について 


//　通常は、演奏のみを行いますが、
//　スイッチを付けることで、コンソールへ出力できたりします。

　-- スイッチの例 --

　Fsm7b5("r131",arp_lyric) // リリックへコード出力
　Fsm7b5("d^du",cut_prn)   // prnはコード内容の表示

　Str TT= Fsm7b5("d^du",cut_result) // 変数確保
　Print(TT)


　■プリント出力 "prn"

　構成和音を返値付きでコンソール出力します。
　主にチェック用途です。

//　E7(3,prn)
//　prn | cut_prn | arp_prn


　■デバッグ出力 "print"

　実際に再生するMMLをコンソール出力します。

//　E7(3,print)
//　print | cut_print | arp_print


　■返値 "result"

　構成和音の返値のみを返します。
　変数に確保し、再利用するときなどに使います。

//　E7(3,result)
//　result | cut_result | arp_result


　■コード出力 "lyric"

　選択コードをLyricへ出力します。

//　E7(3,lyric)
//　lyric | cut_lyric | arp_lyric



 
　□デフォルトモードマクロの変更について 

//　デフォルトモードを変更することにより、
//　省略記述がてきます。


　■#Device_set= "XG" //default [ GM | GS | XG ]

　　発音タイミングの選択をします。

　　XGは、Ms synth.用に調整したタイミングを使用します。
　　GSは、モタリ感のない、ソリッドなタイミングにします。
　　GMは、旧バージョンのサウンドを再現します。


　■#Mode_set= "stk" //default

　cutやarp記述を省くときに使用します。

　A7("d^^u",cut)

　->#Mode_set="cut"
　->A7("d^^u")

//　stk | prn     | print     | result     | lyric
//　cut | cut_prn | cut_print | cut_result | cut_lyric
//　arp | arp_prn | arp_print | arp_result | arp_lyric



　■#Cut_set= "d^du^udu" //default
　　#Arp_set= "r323 1232"

　繰り返しの演奏指定を省くなどで使用します。

　A7("d^^u",cut)

　->#Cut_set={d^^u}
　->#Mode_set="cut"
　->A7


　■#Sum_chg= "on" //default [on | off]

　通常は、ルート弦を自動アサインしますが、

　自動アサインせず、手動で指定をする場合、"off"にします。
　("off"にするとエラー出力が付きます)



　■#Down_set= "2" //default
　　#Up_set  = "2"

　デフォルトのバラつきの速度を変更します。

　A7({d(バラつき2)^^u2},cut)

　->#Down_set= "4"
　->A7({d(バラつき4)^^u2},cut)



　■#Tune_set= "nomal" //default (regular-tune)

　ギターのチューニングを変えます。
　オープンチューニングの曲を打ち込む際に使用します

//　nomal  | openG | openGm      | openD  |
//  openDm | dropD | nash(ville) | DADGAD |
//  drop642 | drop531



　-- マクロ変更例 --

 Include(guitar2.h)

  @26 q94 l8 o3

　#Tune_set= "openG";	// openGへ変更
　#Mode_set= "cut";		// モード変更

　[ Am Dm7 Em7 : FM7("d4^ ^^^^ u4r ") ] l1 FM7("d5") l8

  @25 q97

  #Tune_set= "openDm";	// openDmへ変更
  #Mode_set="arp";		// モード変更
  #Arp_set="r131 u212";	// 演奏指定

  [ Am9 Gbm9 Gm9 : Abm9 ] Abm9



 
*/ 
  	
/*　　テクニカルリファレンス 


　より詳しい説明及び、
　使い方のノウハウなどを載せました



	
　□テンションコード 


//　コード呼出しの仕様について


　- テンションのセオリー -


　　ピアノは、9度の場合ルートを省きますが、
　　ギターでは普通ルートは省きません。

　　9,11,13であっても省略は、5度としました。
　　M913のような6和音では、きついフォームに限り3度も省きます。

　　響きがしっかりしているテンションのみ、セレクトしました。
　　ポリトーナルなテンションについては、Chdprintを使用して下さい。



　/ 通例とは違うコードについて /

　　通常 add9は、sus2のコードが代用されますが、
　　add9には、3度を付加しています。

　　Csus2 + "e" -> Cadd9


　/ 同じ構成のコード /

　　以下のコードは、同じものとなっており、
　　内部で置き換えています。

　　AM9		= AM79
　　Am9		= Am79
　　A9		= A79

　　A711	= A7sus4
　　A913	= A69
　　As9b13	= Am7s5
　　A7s5	= Aaug7


　/ 構成音が同じである代理コード /

　　G b9#11は、裏コードと同じです。

　　G b9s11  = Db7


　　以下は、短三度上のコードと同じです。
　　響きの好きなほうを選択して下さい。

　　Am7      = C6
　　Am711    = C69
　　Am7b5    = Cm6
　　Am7b511  = Cm69


　　mM7b5は、長2度下の代理コードM7と同じです。

　　CmM7b5   = BbM7


　　m911は、11thによりm3が省かれるため、
　　長2度下の代理コードadd9と同じです。

　　Cm911    = Bbadd9


　　7b9は響きに難があり、機能はdim7と変わらないため、
　　構成音が近い、半音上の代理コードdim7を使うほうが、
　　良いかもしれません。

　　G7b9    -> G#dim7
 
　□演奏技法との兼ね合い 



//　ギターらしくするための、
//　フレット上における演奏技法のコツです

	
　- ハイコードポジションで運指 - 


　　通常、開放弦を使ったローコードで弾くのであれば
　　ルート弦は自動的に選択されますが、

　　ハイコードポジションでの運指をする場合、
　　ルート弦の指定で対応することになります



　　例えば、| D | A | G などのコードチェンジであれば、

	1E ||   |   |   |   |   |
	2B ||   |   |   |   |   |
	3G ||   |   |   |   |   |
	4D ||   |   |   |   |   |
	5A ||   |   |   |   |  d|
	6E ||   |   |  g|   |  a|
	  N    1   2   3F  4   5F


　　D(,,5) A(,,6) G(,,6) とポジション指定を付けます。
　　これで、d>a>gとルート弦を変えて演奏します。

　　Fletを維持しつつ、5弦から 6弦へと
　　4度のルート移動を入れることで、それらしくなります


 
　- ハイコード指定における弦数の加減 - 


　　ハイコードで、1弦、またはルート弦を省く、
　　またはドミナントボトムになる低音弦の追加など、
　　細かい指定をしたい場合、以下のオプションで対応します。



　　指定の基本スタイルは以下のとおりです。

	"#"付きで、あれば、低音弦を追加
	"b"付きは、ルート弦を省く
	"x"が付くと、1弦をミュートします

　　"4#"  | 4弦ルート 5弦付き、         5,4,3,2,1弦を弾く
　　"4x"  | 4弦ルート ミュート1弦、     4,3,2弦のみ
　　"4b"  | 4弦ルート ルート弦省き、    3,2,1弦のみ
　　"4bx" | 4弦ルート ミュート1弦、ルート弦省き、3,2弦のみ


　　D(,,"5#x") A(,,"6x") G(,,"6x") のように記述します


　　押さえ方のバリエーション一覧

　　6,6x, 6b,6bx |  5#,5#x, 5,5x, 5b,5bx | 4#,4#x, 4,4x, 4b,4bx


 
　- つま弾き指定の仕様 - 


　　コード構成音から見た、各弦の対応表です。



//　　r	| 6弦相当 : (ルート弦となります)
//　　h	| 5弦相当 : (五度のハーモニーや四度であることが多い )
//　　u	| 4弦相当 : (八度のユニゾンや長短七度が多い )
//　　3	| 3弦相当 : (四度や長短三度が多い)
//　　2	| 2弦　　 : (ハーモニーや六度の担当が多い)
//　　1	| 1弦　　 : (九度のテンションかユニゾンが多い)


　　基本的に、細い弦の優先度が高い、
　　アルペジオを模した仕様となっており、
　　弦数に応じて、rhuなどを自動でアサインされます。
　　一番低い弦が、必ず、rとなります。

　　ポジションが6つは、rhu321、
　　ポジションが5つは、 ru321、
　　以下、r321, r21と、使う弦が減る仕様です。



  
　□実践的な凡例 



//　より実践的な使用法を載せました


	
// Cutting / 16beatカッティング 


　　ゲートや音量、相対オクターブを駆使して、
　　シンコペーションやブラッシングを、
　　入れることで疾走感を出します。


　■16beatロックカッティングの例


　　Include(guitar2.h); @28 l16 q88 o3 v101 Time=(!4)
　　[
　　Dm7("d,1",cut,4)'>db-<'
　　Gm7("(q88 v+36) d,2u,3  (q18 v-36) [3 d,1u,2]",cut,"5x")
　　Gm7("(q88 v+36) d,2^d,2",cut,"5x")
　　Dm7("u,2^^",cut,4)
　　]


 
// Arpeggio / アルペジオのバリエーション 


　　コルトレーンチェンジとII-V解決による、
　　アルペジオパターン例です。


　■短三度上の7thとII-Vモーション


　　Include(guitar2.h); @27 o3 q108 Time=(!1)

　　#A= "[r 321 u 321]"		l8 EbM7( #A,arp) // P1
　　#B= "[r 323 1 232]"		l8  Am7( #B,arp) // P2
　　#C= "[r 312 u 312]"		l8   D7( #C,arp, 5) // P3 5弦ルート
　　#D= "[r 3'21'3 u 3'21'3]"	l8  GM7( #D,arp) // P4
　　#E= "['r21'3'21'3 'u21'3'21'3]"l8  Bb7( #E,arp) // P5
　　#F= "[r 321 ^232]"		l8  EbM7(#F,arp) // P6
　　#G= "['r1'232 'u1'232]"		l8  Fs7( #G,arp) // P7
　　#H= "[r 32123 u 32123]"	l12 BM7( #H,arp) // P8
　　#I= "[r32 h32 u1]"		l8  Fm7( #I,arp) // P9
　　#J= "[r32 u12 32]"		l8  Bb7( #J,arp) // P10
　　#K= "['r2'3u 1^:23^]^^^"	l8  DsM7(#K,arp) // P11


//　参考URL
　-- http://guitar.zashiki.com/practice/gd03.html
 
// Arpeggio / ボサノバパターン 


　　濁りのあるテンションを
　　入れると、よりそれらしくなります。


　■基本ボサノバリズム


　　Include(guitar2.h); @27 v101 l8 q88 o3 Time=(!1)

　　AM9(   " 'u13'^'123'^ r'13'^ "       ,arp,"5")
　　Asdim7(" '123'  u'13'^'13' r^'123'^ ",arp,"5#")
　　Bm9(   " 'u13'^'123'^ r'13'^ "       ,arp,"5#")
　　E9(    " '123'  u'13'^'13' r^'123'^ ",arp, 6)

//　参考URL
　-- https://www.youtube.com/watch?v=89EALHQy3T0


 
// Chdprint"N" / ナットモードでの分数コード 


　　6弦ドミナントペダルを付けた、
　　2弦の押さえのみチェンジする、定番の内声クリシェです。

　　フレットを"8765"と変化することで、コードが変化します。


　■ペダル付きクリシェ内声移動の例


　　Include(guitar2.h)
　　@26 o3 q96 v99 l8 Time=(!1)
　　#Mode_set="cut"

　　Chdprint("557 785 N") // Dsus4/A
　　Chdprint("557 775 N") // D/A
　　Chdprint("557 765 N") // Dm/A
　　Chdprint("557 755 N") // Dadd9/A

　　@25 q108 v106
　　#Mode_set="arp"

　　Chdprint("557 785 N") // Dsus4/A
　　Chdprint("557 775 N") // D/A
　　Chdprint("557 765 N") // Dm/A
　　Chdprint("557 755 N") // Dadd9/A


 
// Chdprint"A" / キー指定モードでのテンション 


　　カポタスト的に、Aルートを固定したまま、
　　数字を適当に並び変え、テンション化したものです。


　■テンションの濁り例


　　Include(guitar2.h)

　　@26 o3 q96 v99 l8 Time=(!4)
　　#Mode_set="cut"

　　Chdprint("r22 102 A")  // Aadd9
　　Chdprint("r22 010 A")  // F/A
　　Chdprint("r20 202 A")  // A9sus4
　　Chdprint("r20 013 A")  // Am7 b13

　　@25 q108 v106
　　#Mode_set="arp"

　　Chdprint("r22 102 A")  // Aadd9
　　Chdprint("r22 010 A")  // F/A
　　Chdprint("r20 202 A")  // A9sus4
　　Chdprint("r20 013 A")  // Am7 b13


　　コードネームは出力確認から。

 
// #Tune_set / ボトルネック奏法 


　　まず、オープンチューニングにします。

　　#Tune_set= "openG"; と入力し、
　　開放でG が鳴るように、変更して下さい



　■スライドギター、ボトルネック奏法の例


　　Include(guitar2.h)
　　#Tune_set= "openG"
　　@27 l8 o3 q108

　　BR=7
　　Sub{ p%.T(0,8191,!8^16) r16 rr  r2 p%.T(8191,0,!8) }
　　Sub{ rrr M.T(88,16,!2) }
　　Chdprint({ d^d^ ^^^^ ^u^^ },cut,"xr0 000  D" })


  
　□スクリプトの概要について 



//　guitar2.hスクリプトの、
//　必要と思われる概要のみここに記しました


	
　- ストローク / guitar.h互換 - 



//　guitar.hとの完全な互換は、取ってません。

　F#の場合、gt.hではFpと記載しますが、gt2.hでは、Fsと記載します。
　pとbが良く似ているため変更しました。

　guitar.hはコードが読み込まれると、最終的に o5が書き込まれます。
　guitar2.hでは混乱を避けるため、コードが読み込まれても、
　o指定値はそのままとなっています。



 
　- カッティング Cutting - 



//　各弦、またはストローク方向によって、
//　タイミングと、音量変化を加えてます


　guitar.hは、"t"のみでバラつきを再現しています。
　これだと何となく、演奏的に違和感があったため、guitar2.hでは、
　"t__9%"と"q__9%"の相対値によるゲート長補正を追加しました。

　これによりコードのポジションチェンジ時、自動的に
　全弦ミュートがかかり、ギターらしい音が再現されます。

	Dm      	D    　　　　	Dm      D
	------	|======		------	|======
	----		|--    　→		----		|
			|  ====				|  ====
	--		|----==		--		|    ==

　また数ステップですが、guitar.hより演奏タイミングを早めています。
　もしタイミングを遅らせたいときは、tでの調整や、
　r%1のような休符を追加してください


 
　- アルペジオ Arpeggio - 

//　アルペジオにおけるmml展開、外部コマンドの仕様


　　アルペジオでは、

　　A("r321") | 'a>ea>d-e<<'

　　S{rrr``e}
　　S{rr``d-^}
　　S{r`a^^}
　　S{rrrr}
　　　a^^^

　　このように、mml展開をしています。

　　外部コマンドを入れる場合、仕様として

　　A("r (v_+10) 321")

　　S{rrrv_+10``e}
　　S{rrv_+10``d-^}
　　S{rv_+10`a^^}
　　S{rrrrv_+10}
　　　a^^^v_+10

　　上記のように展開しますが、
　　Subコマンドの特性上、最下部の" a^^^ "にも、
　　(v_+10)が適用されてしまいます。

　　これを迂回するためには、内部解決するように記述します。

　　A("r (v_+10) 321(v_-10)")

　　S{rrrv_+10``ev_-10}
　　S{rrv_+10``d-^v_-10}
　　S{rv_+10`a^^v_-10}
　　S{rrrrv_+10v_-10}
　　　a^^^v_+10v_-10


//　アルペジオ内部ループの模式図

　　通常アルペジオの模式図

　　C7("r32123 r123") C7("r123 r32123")

　　| C7:         | C7:
　      1-----1---|  1-----1---
　     2-2-----2--|   2---2-2--
　    3---3-----3-|    3-3---3-
　  R-------R-----|R----R------


　　途切れのないアルペジオの模式図

　　C7("[r32123 r123]")

　　| C7:
　      1-----1---|----1-----1---
　     2-2-----2--|---2-2-----2--
　    3---3-----3-|--3---3-----3-
　  R-------R-----|R-------R-----
  
*/ 


  
