/*　　概要 


// title:        "notecnvt2.h"
// description:  逆読み鏡像機能付き MMLノートコンバータ
// keywords:     SAKURA Function     Powered by 04coreworks


	メロディの逆読み、鏡像メロディを演奏するためのものです。
	カノン型式のオルガン曲や、十二音技法で使用できます。


	このヘッダは、mmlの移調変換、一時から相対オクターブ変換、
	mmlのリバース出力とメロディの鏡像化をサポートします。



	notecnvt2.hは、構造化エディタに対応しています。


	※ KeyとKeyFlag(調 )の機能を一部利用します。


	Includeフォルダに入れて使います。
	notecnvt2.hを、サクラ、TWのIncludeフォルダに入れて下さい。


	※ リネームが必要な場合

	拡張子"h"が、何らかのソフトにより登録されているケースにおいて、
	"notecnvt2.h.mml"とリネームされることがあります。

 	この場合、フォルダオプションの、
	"登録されている拡張子は表示しない"のチェックを一時的に外し、
	拡張子を表示するようにした後、リネームしてみて下さい。
	
　□注意点 

　エラーチェックは最低限のみです。

　できれば、コンソール出力を使い、一度テスト、
　変換結果の確認を行なうことを、おすすめします。
 
　□ 免責事項 /使用条件 /著作権など 


　・Apacheライセンス2.0を適用して下さい

　・当スクリプト群を使用して何らかの問題が起こっても、
　　責任を要求しないこと

　・再配布する際は、当ファイルを維持して下さい


　= 黄白紅藍玄 =
　https://twitter.com/huangbaihonglan

　Copyright(C) 04coreworks
　https://github.com/eseakisakura
 
　□謝辞 


　この機能は、以下のページ様を参照しています。


　https://ja.wikipedia.org/wiki/%E5%8D%81%E4%BA%8C%E9%9F%B3%E6%8A%80%E6%B3%95
　https://www.senzoku-online.jp/synthetic_chair/lesson_05-03.html
　http://d.hatena.ne.jp/f_iryo1/20070427/1177644225
 
　□履歴 

 16 5 13	仮完成 ver.0
      14	一時オクターブ据え置き版も付帯
      15	鏡像メロディに対応した
　　　16	コードの全面修正 ver.1
		取説書いた
      18	MMLの#b時の鏡像処理追加
		r処理間違い直し
      25	A#のような#-音指定での鏡像に対応した
      30	#bは、KeyFlagを適用しないに変更
      31	演奏時のみ一時初期化とした
		rela,rev,mirror2は調を反映させないに変更
    6  2	分離とエラー修正
       4	Arr_strを再帰にした
		miror2のオクターブ間違い修正
      11	付点に対応

 20 7 19	ドキュメント直した
 
*/ 
  
/*　　クイックリファレンス 
	
　□早見表 

　Note_cnvt([{ ストトン|MML }],[ rela | rev | {(&)c-b} ],[ run | prn | print ])
 
　□各機能の記述例 






















	
　■移調変換 - (fwd) 

　Include(notecnvt2.h);
　Key=2; 調♯(ファ)

　Note_cnvt({ cfga },,"prn")

　Print: dg+ab // f -> g+
 
　■一時、相対オクターブ変換 - rela 

　Include(notecnvt2.h);
　Note_cnvt({ >c>f'`g"a' },rela,"prn")

　Print: >c>f'>g<<a'<
 
　■リバース出力 - rev 

　Include(notecnvt2.h);
　Note_cnvt({ [f2>g8"a4,100] },rev,"prn")

　Print: [ "a4,100g8<f2]
 
　■鏡像化メロディ - {a-~g#} 

　Include(notecnvt2.h);
　Key=2; 調♯(ファ)
　Note_cnvt({ <efga> },{"g},"prn")

　Print: d-"b"a"g+
 
　■数学的鏡像化メロディ - {&a-~&g#} 

　Include(notecnvt2.h);
　Note_cnvt({ <efga> },{&"g},"prn")

　Print: "b-"a"g"f

  
　□基本雛型 


　Include(gs.h) ResetGS()r4
　Include(notecnvt2.h);

　#SS= { "a"b cde fga }

　Note_cnvt(#SS,rela,"prn")	// 一時、相対oct変換

　Note_cnvt(#SS,rev,"prn")	// リバース

　Str TT;

　Key=2
　TT= Note_cnvt(#SS)	// 移調
　Print(TT)

　Key=0 調♯(ファ)
　TT= Note_cnvt(#SS)	// 移調
　Print(TT)

　Key=0 調♯()
　TT= Note_cnvt(#SS,{e})	// 鏡像化
　Print(TT)

　TT= Note_cnvt(#SS,{&e})	// 数学的鏡像化
　Print(TT)
 
*/ 
  
/*　　取扱説明書 




	
　□各機能の説明 


　- 使い方 -

　Note_cnvt("cfga",rev,"prn")
　でコンソール出力します。

　Note_cnvt("f`g"a",rev,"run")
　では演奏のみします。
















	
　■移調変換 - Forward 


　指定された調とキーを読み込んで変換します。
　KeyFlagで調、Keyでキーを指定します

　調♭(シ){ 'gb`d' }であれば、{ 'gb-`d' }と変換します。

　Key=2 { cfg }となっていれば、{ dga }と変換します。


　key=2 Note_cnvt("cfg","prn")
 
　■相対オクターブ修正 - Relative 


　一時オクターブを相対オクターブに書き換えます。
　FMP7やppmckなどに転用する際、使用できるかと思います。

　指定は"rela"とします。
　{ c`e>g }であれば、{ c>eg }のように書き換えます


　Note_cnvt({ c`e>g },rela,"prn")
 
　■リバース出力 - Reverse 


　MMLを逆読み出力します。十二音技法でいう逆行形です。


　指定は"rev"です。
　{ ace }は、{ eca }となります。
　{ l4 d l8 fg }は、{ l8 gf l4 d }と変換します


　Note_cnvt({ l4 d l8 fg },rev,"prn")
 
　■鏡像化メロディ - Mirror 


　譜面の上向き下向きを、反転したメロディにします。
　十二音技法での、反行形となります。

　音の高さを指定することで、鏡像化します。
　中心に指定する音の表記は、"と`、#や-を含む{c-b}です。

　中心指定{a}であれば、{ ab`c }は、{ agf }

　中心が{a-}では、{ fa`c }を、{ bge }と変換します。


　また、調とキーの指定があれば、これを反映します。
　調♯(ファ)で中心{c}であれば、{ "gce }を、{ f+c"a }と変換します


　調♯(ファ) Note_cnvt({ "gce },{c},"prn")
 
　■数学的鏡像化メロディ - Mirror2 


　もし、数学的に上下を反転したいのであれば、
　中心音に{&a}と、"&"を含めて記述して下さい。

 この場合、調は反映されません。
　
　{ a`c#`e }で、中心{&`c}であれば、{ `eba }と変換します


　Note_cnvt({ a`c#`e },{&`c},"prn")
  
　□各機能の出力選択について 


　デフォルトでは、返値"result"を返します。


　■返値を返す "result" [default]


　Str TT= Note_cnvt({ cfg },rev)のみでは、返値を返します。



　■再生のみ "run"


　Note_cnvt({ cfg },rev,"run")では、演奏のみになります。



　■プリント出力 "prn"


　Note_cnvt({ cfg },rev,"prn")は、返値付きコンソール出力です。



　■デバッグ "print"


　Note_cnvt({ cfg },rev,"print")も、ありますが、
　再生も行う、返値付きコンソール出力です。
　主に、デバック用途です。


 
　□使用上の制限 
	
//　- 使用できる文字制限 - 


　a-gr^. lqvto@, 0-9 #+- "`<> ' []のなどのMML文字に対応します。
　または、これに対応するストトンも可。
　基本的に、短かめのMMLのみ扱うものだと思って下さい。

　改行のあるMMLでも動きますが、曲まるごとはできません。

　TrackKey をリバース出力で変換すると、
　yeKkcarTと出力されエラーとなるためです。
 
//　- ループの対応 - 


　ループなどの繰り返しによる、オクターブ変化は、
　完全には対応できていません。相対位置の割り出しが意外と難しいためです。

　実際に聞いて確認する、ないしはコンソール出力からの修正が必要となります。
 
//　- メロディ鏡像化におけるキーと調の適用順について - 


　鏡像化では、まずメロディの反転を行った後に、
　キーと調を適用します。調性世界のなかに、納めるためです。
 
//　- 調とキーの影響について - 


　調とキーの値を読むのは、移調と鏡像化のときです。

　#やbを含めずに、記入する必要があります。
　{ df#a } -> 調♯(f){ dfa }



　数学的鏡像化メロディにおいては、
　再生時における、KeyFlagの影響を防ぐため、

　あらかじめ、調を適用したメロディを用意する必要があります。
　調♯(f){ dfa } -> 調♯(){ df#a }{&a}
 
//　- 連続変換する際の注意事項 - 


　まるごと変換する際には、
　最後の出力が、調の値を参照するもの、

　移調変換ないし鏡像化になるように行なったほうが安全です。


　例えば以下のように指定します。

　Include(notecnvt2.h);

　#TT={ cfga }

　Key=2; 調♭(シ)

　Str TT= Note_cnvt(#TT,rev)		// リバース出力を先に

　        //Note_cnvt(TT,,"run") 	// 移調の場合　 | 逆行形
　        Note_cnvt(TT,{a},"run") 	// 鏡像化 	| 逆反行形


　上記、逆反行形を説明すると、

　"rev"指定により、逆読み出力した後、
　メロディ{ cfga }を{a}を中心として鏡像化し、

　調♭(シ)の指定を読込み、シがあれば♭シと変更、
　Key=2によって、全体を移調変換のち演奏する。

　という変換を行ったことになります。


　ワンライナーの場合は、以下のようになります。

　Include(notecnvt2.h);
　#TT={ cfga }

　Key=2; 調♭(シ)

　//Note_cnvt(Note_cnvt(#TT,rev),,"run")	// 移調の場合　 | 逆行形
　Note_cnvt(Note_cnvt(#TT,rev),{a},"run")	// 鏡像化 	| 逆反行形
  
*/ 
  
/* 

//Key=2 調♭(ラ)
//Note_cnvt({ l6 `a#4,100 l8 >@3[4 'a>ce'] l12 <"a>>a },rev)



	見つかってしまった..
	プログラム化のゲラです、
	てか閃いた的な、記録メモだったり。



	- 移調変換か鏡像化を、最後にする理由 -


	サクラのKeyFlag仕様では、調♯(ド)のとき、
	c が c+, c+ は dとして再生するため、
	混乱しやすい。

	これを避けるため、移調変換と鏡像化では、再生時、
	一時的に調やキーの指定を解除する。
	そのため、この影響を受けづらい。



	- 鏡像について -


	配列の添字にマイナス値はないのですが、
	RR( 2)=`c
	RR( 1)= b
	RR( 0)= a
	RR(-1)= g
	RR(-2)= f

	上行であれば、RR(0) -> RR(2)なので、

	これを鏡像化すると、
	RR(0) -> RR(-2)であれば完了します。

	中心音がa#やa-では、それぞれ一音上下します。



	- 相対オクターブ修正について -


	これがすべてなのですが、
	Num= Num+Oct-Ocv; Ocv= Ocv+ Num

	Ocvは、相対値と一時値の仮想オクターブの記録です。
	Octは、相対値の記録で、
	Numは一時値の記録です。

	Numは、相対オクターブの個数出力で再利用したり。



	- リバース出力について -


	基本的には、読み込んだ値をそのまま、
	前に足しただけです。

	コツは<>を><と反転することぐらい

	lの値とかはまず、スタック後
	lがもう一度来たら、スタック値を返して前に足すとか


	下側のふたつは 配列仕様の部分で直しがあったり、主に見た目、

	その上は j%7<0に気付くのに、時間がかかったりしています。
	 j<0で、c=0がc=7となってしまっていた。

*/


 
